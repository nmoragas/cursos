# EXEMPLE1
# implement a program that prompts the user for a str in English and then outputs the “emojized” version of that str,
# converting any codes (or aliases) therein to their corresponding emoji.

# Install in teh terminal: pip install emoji.

# import to python:
import emoji

def main():
    lletres = input("Input: ")
    emo = emoji.emojize(lletres, language='alias')
    print(f"Output: {emo}")

main()

###############################################################################################################################


# EXEMPLE2

# pip install pyfiglet


#implement a program that:

    #Expects zero or two command-line arguments:
        #Zero if the user would like to output text in a random font.
        #Two if the user would like to output text in a specific font, in which case the first of the two should be -f or --font,
        # and the second of the two should be the name of the font.
    #Prompts the user for a str of text.
    #Outputs that text in the desired font.
# If the user provides two command-line arguments and the first is not -f or --font or
# the second is not the name of a font, the program should exit via sys.exit with an error message.

# import to python:
import pyfiglet

#from pyfiglet import Figlet
#figlet = Figlet()

# You can then get a list of available fonts with code like this:
#figlet.getFonts()


# You can set the font with code like this, wherein f is the font’s name as a str:
#figlet.setFont(font=f)

#And you can output text in that font with code like this, wherein s is that text as a str:
#print(figlet.renderText(s))


import pyfiglet
import sys


from pyfiglet import Figlet
figlet = Figlet()
fonts = figlet.getFonts()


def main():
    if len(sys.argv) == 1:
       transfromed_z = zero_line()
       print(f"Output: \n{transfromed_z}")

# If the user provides two command-line arguments and the first is not -f or --font or
# the second is not the name of a font, the program should exit via sys.exit with an error message.
    elif len(sys.argv) == 3:
        if sys.argv[1] not in ["-f", "--font"]:
            sys.exit("Invalid usage")
        if sys.argv[2] not in fonts:
            sys.exit("Invalid usage")
        else:
            transformed_tw = two_line()
            print(f"Output: \n{transformed_tw}")


    else:
        sys.exit("Invalid usage")

# generació de funcions
# 0 arguments:

def zero_line():
    to_transform = input("Input: ")
    transfromed = figlet.renderText(to_transform)
    return transfromed


# 2 arguments:
def two_line():
    to_transform_tw = input("Input: ")
    f = sys.argv[2]
    figlet.setFont(font=f)
    transfromed_tw = figlet.renderText(to_transform_tw)
    return transfromed_tw


main()

########################################################################################################################

# EXERCICI3

'''
implement a program that prompts the user for names, one per line, until the user inputs control-d.
Assume that the user will input at least one name. Then bid adieu to those names, separating two names with one and,
three names with two commas and one and, and  names with  commas and one and, as in the below:

Adieu, adieu, to Liesl
Adieu, adieu, to Liesl and Friedrich
Adieu, adieu, to Liesl, Friedrich, and Louisa
'''

# pip install inflect

import inflect

p = inflect.engine()
x = p.join(["Liesl", "Friedrich", "Misha"])
print(x)



def main():
    pre_llista = fer_llista()
    p = inflect.engine()
    x = p.join(pre_llista)
    print(f"Adieu, adieu, to {x}")


def fer_llista():
    llista = []
    while True:
        try:
            item = input("Name: ")
            llista += [item]

        except EOFError:
            return llista


main()


########################################################################################################################

# EXERCICI 4:
'''
INSTRUCIONS
1 Prompts the user for a level, 
.   If the user does not input a positive integer, the program should prompt again.
2 Randomly generates an integer between 1 and 
,   inclusive, using the random module.
3 Prompts the user to guess that integer. If the guess is not a positive integer, the program should prompt the user again.
    If the guess is smaller than that integer, the program should output Too small! and prompt the user again.
    If the guess is larger than that integer, the program should output Too large! and prompt the user again.
    If the guess is the same as that integer, the program should output Just right! and exit.
'''
# 3 guess:
import random

def guess_int():
    level = is_integrer()
    random_int = random.randint(1,level)

    while True:
        guess = input("Guess: ")
        guess_int = int(guess)
        
        if guess_int > random_int:
            print("Too large!")
            pass

        elif guess_int < random_int:
            print("Too small!")
            pass
        else:
            print("Just right!")
            break
         


# 1 level user
def is_integrer():
    while True:
        try:
            level_int = int(input("Level: "))
            if level_int > 0:
                return level_int
        # qualsevol altra cosa que no sigui una int >0 error
        except ValueError:
            pass


    
guess_int()

#######################################################################################################
# EXERCICI 5


'''

- 1 Prompts the user for a level, If the user does not input 1, 2, or 3, the program should prompt again.

- 2 Randomly generates ten (10) math problems formatted as X + Y = , wherein each of X and Y is a non-negative integer with 
 digits. No need to support operations other than addition (+).

- 3 Prompts the user to solve each of those problems. If an answer is not correct (or not even a number), 
the program should output EEE and prompt the user again, allowing the user up to three tries in total for that problem. 
If the user has still not answered correctly after three tries, the program should output the correct answer.

- 4 The program should ultimately output the user’s score: the number of correct answers out of 10.


Note that you can raise an exception like ValueError with code like:
raise ValueError
'''


import random


def main():
    n_preguntes = 0
    puntuacio = 0
    
    while n_preguntes < 3:
        level = get_level()
        resposta_correcte = generate_integer(level)
        puntuacio += resposta_correcte
        n_preguntes += 1
    else:
        print(f"El teu resultat es: {puntuacio}")
        

def get_level():
    while True:
        try:
            level = int(input("Level: "))
            
            if level > 3 or level < 1:
                raise ValueError 
            return level
        except(ValueError):
            pass
            

def generate_integer(level):
    if level == 1:
        x = random.randint(1,9)
        y = random.randint(1,9)
    if level == 2:
        x = random.randint(10,99)
        y = random.randint(10,99)
    if level == 3:
        x = random.randint(100,999)
        y = random.randint(100,999)
    
    # Bucle de fins a 3 intents
    n_resposta = 0
    
    while n_resposta < 3:
        guess = input(f"{x}+{y}= ")
        guess_int = int(guess)
        result = int(x + y)

        # Comprovem el resultat
        if guess_int == result:
            return 1
            break
            
        else:
            print("EEE")
            n_resposta += 1
    
    # tancar bucle 3
    else:
        print(result)
        return 0 
        

        


'''   
    



'''
    




if __name__ == "__main__":
    main()



