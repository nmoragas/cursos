# EXERCICI 1

# en un fitxer anomenat lines.py, implementeu un programa que esperi exactament un argument de línia d'ordres, el nom (o la ruta) d'un fitxer Python,
#  i que mostri el nombre de línies de codi d'aquest fitxer, excloent els comentaris i les línies en blanc. 
# Si l'usuari no especifica exactament:
#         un argument de línia d'ordres, o si 
#          el nom del fitxer especificat no acaba en .py, 
#         o si el fitxer especificat no existeix, 
# 
# el programa hauria de sortir mitjançant sys.exit.
# 
# Suposeu que qualsevol línia que comenci amb #, opcionalment precedida d'espais en blanc, és un comentari. 
# (Una docstring no s'ha de considerar un comentari.) Suposeu que qualsevol línia que només contingui espais en blanc està en blanc.

import sys

# 1 comprovar fitxer entrada

def main():
    
    if len(sys.argv) < 2:
        sys.exit("Too few command-line arguments")
    if len(sys.argv) > 2:
        sys.exit("Too many command-line arguments")
    if len(sys.argv) == 2:
        filename = sys.argv[1]

        if not filename.endswith(".py"):
            sys.exit("Not a Python file")

        else:
            resultat = comptar_lineas()
            print(resultat)


def comptar_lineas():
    filename = sys.argv[1]
    try:
        comptatge = 0
        with open(filename) as file:
            for line in file:
                #stripped = line.lstrip()
                if line == "" or line.startswith("#") or line == "\n":
                    continue
                comptatge += 1
            return comptatge  
            
    except FileNotFoundError:
        sys.exit("File does not exist")

if __name__ == "__main__":
    main()
#########################################################################

# EXERCICI 2


'''
In a file called pizza.py, implement a program that expects exactly one command-line argument, the name (or path) of a CSV file in Pinocchio’s format, 
and outputs a table formatted as ASCII art using tabulate, a package on PyPI at pypi.org/project/tabulate. 
Format the table using the library’s grid format.

If the user does not specify exactly one command-line argument, or if the specified file’s name does not end in .csv, 
or if the specified file does not exist, the program should instead exit via sys.exit.

'''

import sys
from tabulate import tabulate
import csv

# 1 comprovar fitxer entrada

def main():
    
    if len(sys.argv) < 2:
        sys.exit("Too few command-line arguments")
    if len(sys.argv) > 2:
        sys.exit("Too many command-line arguments")
    if len(sys.argv) == 2:
        filename = sys.argv[1]

        if not filename.endswith(".csv"):
            sys.exit("Not a CSV file")

        else:
            resultat = taula_trans()
            print(resultat)


# tranformar la taula - formatted as ASCII
def taula_trans():
    filename = sys.argv[1]

    try:
        with open(filename) as file:
            reader = csv.reader(file)
            files = list(reader)  # llegir totes les files

            capçaleres = files[0]
            dades = files[1:]

            #return print(files)
            return tabulate(dades, headers=capçaleres, tablefmt="grid")    
            
                        
    except FileNotFoundError:
        sys.exit("File does not exist")

if __name__ == "__main__":
    main()


##########################################################

# EXERCICI 3

'''
In a file called scourgify.py, implement a program that:

Expects the user to provide two command-line arguments:
the name of an existing CSV file to read as input, whose columns are assumed to be, in order, name and house, and
the name of a new CSV to write as output, whose columns should be, in order, first, last, and house.
Converts that input to that output, splitting each name into a first name and last name. Assume that each student will have both a first name and last name.
If the user does not provide exactly two command-line arguments, or if the first cannot be read, the program should exit via sys.exit with an error message.
'''


import sys
from tabulate import tabulate
import csv

# 1 comprovar fitxer entrada

def main():
    
    if len(sys.argv) < 3:
        sys.exit("Too few command-line arguments")
    if len(sys.argv) > 3:
        sys.exit("Too many command-line arguments")
    if len(sys.argv) == 3:
        filename1 = sys.argv[1]
        filename2 = sys.argv[2]

        if not filename1.endswith(".csv"):
            sys.exit("File 1 Not a CSV file")

        if not filename2.endswith(".csv"):
            sys.exit("File 2 Not a CSV file")

        else:
            resultat = taula_trans()
            with open(filename2, "w") as file:
                writer = csv.writer(file)
                writer.writerow(["frist", "last", "house"]) 
                for line in resultat:
                    last, frist = line["name"].split(", ")
                    writer.writerow([frist, last, line["house"]]) 

            print(writer)


# tranformar la taula - nom cognom
def taula_trans():
    filename_in = sys.argv[1]

    try:
        students = []
        with open(filename_in) as file:
            reader = csv.DictReader(file)
            for row in reader:
                students.append({"name": row["name"], "house" : row["house"]})

            return students              
                                 
    except FileNotFoundError:
        sys.exit("File does not exist")

if __name__ == "__main__":
    main()





    
